// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  ADMIN
  EMPLOYEE
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  emailVerified  DateTime?        @map("email_verified")
  password       String?
  image          String?
  role           Role             @default(EMPLOYEE)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  
  // Relation fields
  timeOffBalance TimeOffBalance[]
  timeOffRequests TimeOffRequest[]
  
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model TimeOffBalance {
  id           String   @id @default(cuid())
  userId       String   @unique @map("user_id")
  user         User     @relation(fields: [userId], references: [id])
  vacationDays Int      @default(15) @map("vacation_days")
  sickDays     Int      @default(7) @map("sick_days")
  paidLeave    Int      @default(3) @map("paid_leave")
  personalDays Int      @default(3) @map("personal_days")
  year         Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([userId, year])
  @@map("time_off_balance")
}

model TimeOffRequest {
  id        String        @id @default(cuid())
  userId    String        @map("user_id")
  user      User          @relation(fields: [userId], references: [id])
  startDate DateTime      @map("start_date")
  endDate   DateTime      @map("end_date")
  type      TimeOffType
  status    RequestStatus @default(PENDING)
  reason    String?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@map("time_off_requests")
}

enum TimeOffType {
  VACATION
  SICK
  PAID_LEAVE
  PERSONAL
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

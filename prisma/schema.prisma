// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Added comment to trigger new migration for PERSONAL enum value - 2025-03-24

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

model User {
  id                String           @id @default(uuid())
  email             String           @unique
  name              String
  role              UserRole         @default(EMPLOYEE)
  timeOffRequests   TimeOffRequest[]
  timeOffBalances   TimeOffBalance[]
  auditLogs         AuditLog[]
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([email])
  @@index([role])
}

model TimeOffBalance {
  id            String      @id @default(uuid())
  userId        String
  year          Int
  type          TimeOffType
  totalDays     Float
  usedDays      Float       @default(0)
  remainingDays Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, type], name: "unique_balance_per_year")
  @@index([userId, year])
  @@index([type])
}

model TimeOffRequest {
  id          String        @id @default(uuid())
  userId      String
  type        TimeOffType
  startDate   DateTime
  endDate     DateTime
  workingDays Float
  status      RequestStatus @default(PENDING)
  reason      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startDate, endDate])
  @@index([status])
  @@index([type])
  @@unique([userId, startDate, endDate, type], name: "unique_request_per_period")
}

enum TimeOffType {
  VACATION
  SICK
  PERSONAL
  PAID_LEAVE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  action     String
  entityType String
  entityId   String
  details    Json
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@index([action])
}
